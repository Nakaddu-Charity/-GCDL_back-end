-- Create Database
CREATE DATABASE IF NOT EXISTS gcdl_db;
USE gcdl_db;

-- Users Table (For system users like admins, salespeople)
CREATE TABLE IF NOT EXISTS users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('admin', 'sales', 'procurement', 'manager') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Suppliers Table
CREATE TABLE IF NOT EXISTS suppliers (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    contact_person VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Products Table
CREATE TABLE IF NOT EXISTS products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    supplier_id INT,
    cost_price DECIMAL(10,2) NOT NULL,
    selling_price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    reorder_level INT NOT NULL DEFAULT 5,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id) ON DELETE SET NULL
);

-- Purchases Table
CREATE TABLE IF NOT EXISTS purchases (
    purchase_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_id INT,
    product_id INT,
    quantity INT NOT NULL,
    cost_price DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (quantity * cost_price) STORED,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Sales Table
CREATE TABLE IF NOT EXISTS sales (
    sale_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    user_id INT,
    quantity_sold INT NOT NULL,
    selling_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) GENERATED ALWAYS AS (quantity_sold * selling_price) STORED,
    sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Stock Movement Table
CREATE TABLE IF NOT EXISTS stock_movements (
    movement_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    movement_type ENUM('purchase', 'sale', 'adjustment') NOT NULL,
    quantity INT NOT NULL,
    movement_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Credit Sales Table
CREATE TABLE IF NOT EXISTS credit_sales (
    credit_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    product_id INT,
    quantity INT NOT NULL,
    total_price DECIMAL(10,2),
    due_date DATE NOT NULL,
    status ENUM('pending', 'paid') DEFAULT 'pending',
    sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Payments Table
CREATE TABLE IF NOT EXISTS payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    credit_id INT,
    amount_paid DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (credit_id) REFERENCES credit_sales(credit_id)
);

-- Reports Table
CREATE TABLE IF NOT EXISTS reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_type ENUM('sales', 'stock', 'profit', 'credit') NOT NULL,
    generated_by INT,
    report_data JSON NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (generated_by) REFERENCES users(user_id)
);

-- Insert Sample Users
INSERT INTO users (username, email, password_hash, role) VALUES
('admin_user', 'admin@gcdl.com', 'hashed_password', 'admin'),
('sales_rep1', 'sales1@gcdl.com', 'hashed_password', 'sales'),
('procurement_officer', 'procure@gcdl.com', 'hashed_password', 'procurement'),
('manager1', 'manager@gcdl.com', 'hashed_password', 'manager');

-- Insert Sample Suppliers
INSERT INTO suppliers (name, contact_person, email, phone, address) VALUES
('Agro Suppliers Ltd.', 'John Doe', 'contact@agrosuppliers.com', '0701234567', 'Kampala, Uganda'),
('Farmers Hub', 'Jane Smith', 'info@farmershub.com', '0787654321', 'Mbarara, Uganda');

-- Insert Sample Products
INSERT INTO products (name, category, supplier_id, cost_price, selling_price, stock_quantity, reorder_level) VALUES
('Maize Seeds', 'Seeds', 1, 5000, 7000, 100, 10),
('Fertilizer NPK', 'Fertilizers', 2, 20000, 25000, 50, 5);

-- Insert Sample Purchases
INSERT INTO purchases (supplier_id, product_id, quantity, cost_price) VALUES
(1, 1, 200, 5000),
(2, 2, 100, 20000);

-- Insert Sample Sales
INSERT INTO sales (product_id, user_id, quantity_sold, selling_price) VALUES
(1, 2, 10, 7000),
(2, 2, 5, 25000);

-- Insert Sample Stock Movements
INSERT INTO stock_movements (product_id, movement_type, quantity) VALUES
(1, 'purchase', 200),
(2, 'purchase', 100),
(1, 'sale', -10),
(2, 'sale', -5);

-- Insert Sample Credit Sales
INSERT INTO credit_sales (customer_name, product_id, quantity, total_price, due_date, status) VALUES
('Paul Kato', 1, 5, 35000, '2025-04-30', 'pending'),
('Sarah Ainebyoona', 2, 3, 75000, '2025-05-05', 'pending');

-- Insert Sample Payments
INSERT INTO payments (credit_id, amount_paid) VALUES
(1, 20000),
(2, 50000);

-- Insert Sample Reports
INSERT INTO reports (report_type, generated_by, report_data) VALUES
('sales', 4, '{"total_sales": 5, "total_revenue": 185000}'),
('stock', 4, '{"product_id": 1, "stock_level": 90}');
